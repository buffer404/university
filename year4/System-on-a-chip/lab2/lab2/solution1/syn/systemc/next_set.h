// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _next_set_HH_
#define _next_set_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct next_set : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > permutations_address0;
    sc_out< sc_logic > permutations_ce0;
    sc_out< sc_logic > permutations_we0;
    sc_out< sc_lv<32> > permutations_d0;
    sc_in< sc_lv<32> > permutations_q0;
    sc_out< sc_lv<3> > permutations_address1;
    sc_out< sc_logic > permutations_ce1;
    sc_out< sc_logic > permutations_we1;
    sc_out< sc_lv<32> > permutations_d1;
    sc_in< sc_lv<32> > permutations_q1;
    sc_out< sc_lv<1> > ap_return;


    // Module declarations
    next_set(sc_module_name name);
    SC_HAS_PROCESS(next_set);

    ~next_set();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > reg_131;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<3> > permutations_addr_reg_219;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln53_fu_137_p2;
    sc_signal< sc_lv<32> > j_fu_165_p2;
    sc_signal< sc_lv<1> > icmp_ln53_1_fu_159_p2;
    sc_signal< sc_lv<32> > k_fu_171_p2;
    sc_signal< sc_lv<32> > k_reg_238;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > permutations_addr_2_reg_243;
    sc_signal< sc_lv<32> > l_fu_188_p2;
    sc_signal< sc_lv<32> > l_reg_251;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > permutations_addr_3_reg_259;
    sc_signal< sc_lv<1> > icmp_ln60_fu_194_p2;
    sc_signal< sc_lv<3> > permutations_addr_4_reg_264;
    sc_signal< sc_lv<32> > add_ln61_fu_210_p2;
    sc_signal< sc_lv<32> > add_ln61_reg_269;
    sc_signal< sc_lv<32> > i_assign_reg_74;
    sc_signal< sc_lv<32> > k_0_in_reg_86;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln57_fu_182_p2;
    sc_signal< sc_lv<32> > r_reg_97;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > l_0_in_reg_108;
    sc_signal< sc_lv<1> > p_0_reg_118;
    sc_signal< sc_lv<64> > sext_ln53_fu_143_p1;
    sc_signal< sc_lv<64> > sext_ln53_1_fu_154_p1;
    sc_signal< sc_lv<64> > sext_ln57_fu_177_p1;
    sc_signal< sc_lv<64> > sext_ln46_fu_200_p1;
    sc_signal< sc_lv<64> > sext_ln47_fu_205_p1;
    sc_signal< sc_lv<32> > add_ln53_fu_148_p2;
    sc_signal< sc_lv<1> > ap_return_preg;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_FFFFFFFE;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln53_fu_148_p2();
    void thread_add_ln61_fu_210_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln53_1_fu_159_p2();
    void thread_icmp_ln53_fu_137_p2();
    void thread_icmp_ln57_fu_182_p2();
    void thread_icmp_ln60_fu_194_p2();
    void thread_j_fu_165_p2();
    void thread_k_fu_171_p2();
    void thread_l_fu_188_p2();
    void thread_permutations_address0();
    void thread_permutations_address1();
    void thread_permutations_ce0();
    void thread_permutations_ce1();
    void thread_permutations_d0();
    void thread_permutations_d1();
    void thread_permutations_we0();
    void thread_permutations_we1();
    void thread_sext_ln46_fu_200_p1();
    void thread_sext_ln47_fu_205_p1();
    void thread_sext_ln53_1_fu_154_p1();
    void thread_sext_ln53_fu_143_p1();
    void thread_sext_ln57_fu_177_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
