// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "main.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic main::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic main::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> main::ap_ST_fsm_state1 = "1";
const sc_lv<4> main::ap_ST_fsm_state2 = "10";
const sc_lv<4> main::ap_ST_fsm_state3 = "100";
const sc_lv<4> main::ap_ST_fsm_state4 = "1000";
const sc_lv<32> main::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> main::ap_const_lv32_1 = "1";
const sc_lv<3> main::ap_const_lv3_0 = "000";
const sc_lv<1> main::ap_const_lv1_0 = "0";
const sc_lv<32> main::ap_const_lv32_2 = "10";
const sc_lv<32> main::ap_const_lv32_3 = "11";
const sc_lv<3> main::ap_const_lv3_7 = "111";
const sc_lv<3> main::ap_const_lv3_1 = "1";
const sc_lv<1> main::ap_const_lv1_1 = "1";
const bool main::ap_const_boolean_1 = true;

main::main(sc_module_name name) : sc_module(name), mVcdFile(0) {
    permutations_U = new main_permutations("permutations_U");
    permutations_U->clk(ap_clk);
    permutations_U->reset(ap_rst);
    permutations_U->address0(permutations_address0);
    permutations_U->ce0(permutations_ce0);
    permutations_U->we0(permutations_we0);
    permutations_U->d0(permutations_d0);
    permutations_U->q0(permutations_q0);
    permutations_U->address1(grp_next_set_fu_44_permutations_address1);
    permutations_U->ce1(permutations_ce1);
    permutations_U->we1(permutations_we1);
    permutations_U->d1(grp_next_set_fu_44_permutations_d1);
    permutations_U->q1(permutations_q1);
    grp_next_set_fu_44 = new next_set("grp_next_set_fu_44");
    grp_next_set_fu_44->ap_clk(ap_clk);
    grp_next_set_fu_44->ap_rst(ap_rst);
    grp_next_set_fu_44->ap_start(grp_next_set_fu_44_ap_start);
    grp_next_set_fu_44->ap_done(grp_next_set_fu_44_ap_done);
    grp_next_set_fu_44->ap_idle(grp_next_set_fu_44_ap_idle);
    grp_next_set_fu_44->ap_ready(grp_next_set_fu_44_ap_ready);
    grp_next_set_fu_44->permutations_address0(grp_next_set_fu_44_permutations_address0);
    grp_next_set_fu_44->permutations_ce0(grp_next_set_fu_44_permutations_ce0);
    grp_next_set_fu_44->permutations_we0(grp_next_set_fu_44_permutations_we0);
    grp_next_set_fu_44->permutations_d0(grp_next_set_fu_44_permutations_d0);
    grp_next_set_fu_44->permutations_q0(permutations_q0);
    grp_next_set_fu_44->permutations_address1(grp_next_set_fu_44_permutations_address1);
    grp_next_set_fu_44->permutations_ce1(grp_next_set_fu_44_permutations_ce1);
    grp_next_set_fu_44->permutations_we1(grp_next_set_fu_44_permutations_we1);
    grp_next_set_fu_44->permutations_d1(grp_next_set_fu_44_permutations_d1);
    grp_next_set_fu_44->permutations_q1(permutations_q1);
    grp_next_set_fu_44->ap_return(grp_next_set_fu_44_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_next_set_fu_44_ap_done );
    sensitive << ( grp_next_set_fu_44_ap_return );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_next_set_fu_44_ap_done );
    sensitive << ( grp_next_set_fu_44_ap_return );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_next_set_fu_44_ap_start);
    sensitive << ( grp_next_set_fu_44_ap_start_reg );

    SC_METHOD(thread_i_fu_61_p2);
    sensitive << ( i_0_i_i_reg_33 );

    SC_METHOD(thread_icmp_ln80_fu_55_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_i_reg_33 );

    SC_METHOD(thread_permutations_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_next_set_fu_44_permutations_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln81_fu_67_p1 );

    SC_METHOD(thread_permutations_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_next_set_fu_44_permutations_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_permutations_ce1);
    sensitive << ( grp_next_set_fu_44_permutations_ce1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_permutations_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_next_set_fu_44_permutations_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln80_fu_50_p1 );

    SC_METHOD(thread_permutations_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_next_set_fu_44_permutations_we0 );
    sensitive << ( icmp_ln80_fu_55_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_permutations_we1);
    sensitive << ( grp_next_set_fu_44_permutations_we1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_zext_ln80_fu_50_p1);
    sensitive << ( i_0_i_i_reg_33 );

    SC_METHOD(thread_zext_ln81_fu_67_p1);
    sensitive << ( i_0_i_i_reg_33 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_next_set_fu_44_ap_done );
    sensitive << ( grp_next_set_fu_44_ap_return );
    sensitive << ( icmp_ln80_fu_55_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    grp_next_set_fu_44_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "main_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, permutations_address0, "permutations_address0");
    sc_trace(mVcdFile, permutations_ce0, "permutations_ce0");
    sc_trace(mVcdFile, permutations_we0, "permutations_we0");
    sc_trace(mVcdFile, permutations_d0, "permutations_d0");
    sc_trace(mVcdFile, permutations_q0, "permutations_q0");
    sc_trace(mVcdFile, permutations_ce1, "permutations_ce1");
    sc_trace(mVcdFile, permutations_we1, "permutations_we1");
    sc_trace(mVcdFile, permutations_q1, "permutations_q1");
    sc_trace(mVcdFile, i_fu_61_p2, "i_fu_61_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_next_set_fu_44_ap_start, "grp_next_set_fu_44_ap_start");
    sc_trace(mVcdFile, grp_next_set_fu_44_ap_done, "grp_next_set_fu_44_ap_done");
    sc_trace(mVcdFile, grp_next_set_fu_44_ap_idle, "grp_next_set_fu_44_ap_idle");
    sc_trace(mVcdFile, grp_next_set_fu_44_ap_ready, "grp_next_set_fu_44_ap_ready");
    sc_trace(mVcdFile, grp_next_set_fu_44_permutations_address0, "grp_next_set_fu_44_permutations_address0");
    sc_trace(mVcdFile, grp_next_set_fu_44_permutations_ce0, "grp_next_set_fu_44_permutations_ce0");
    sc_trace(mVcdFile, grp_next_set_fu_44_permutations_we0, "grp_next_set_fu_44_permutations_we0");
    sc_trace(mVcdFile, grp_next_set_fu_44_permutations_d0, "grp_next_set_fu_44_permutations_d0");
    sc_trace(mVcdFile, grp_next_set_fu_44_permutations_address1, "grp_next_set_fu_44_permutations_address1");
    sc_trace(mVcdFile, grp_next_set_fu_44_permutations_ce1, "grp_next_set_fu_44_permutations_ce1");
    sc_trace(mVcdFile, grp_next_set_fu_44_permutations_we1, "grp_next_set_fu_44_permutations_we1");
    sc_trace(mVcdFile, grp_next_set_fu_44_permutations_d1, "grp_next_set_fu_44_permutations_d1");
    sc_trace(mVcdFile, grp_next_set_fu_44_ap_return, "grp_next_set_fu_44_ap_return");
    sc_trace(mVcdFile, i_0_i_i_reg_33, "i_0_i_i_reg_33");
    sc_trace(mVcdFile, icmp_ln80_fu_55_p2, "icmp_ln80_fu_55_p2");
    sc_trace(mVcdFile, grp_next_set_fu_44_ap_start_reg, "grp_next_set_fu_44_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln81_fu_67_p1, "zext_ln81_fu_67_p1");
    sc_trace(mVcdFile, zext_ln80_fu_50_p1, "zext_ln80_fu_50_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("main.hdltvin.dat");
    mHdltvoutHandle.open("main.hdltvout.dat");
}

main::~main() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete permutations_U;
    delete grp_next_set_fu_44;
}

void main::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_next_set_fu_44_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_next_set_fu_44_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_next_set_fu_44_ap_ready.read())) {
            grp_next_set_fu_44_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln80_fu_55_p2.read(), ap_const_lv1_0))) {
        i_0_i_i_reg_33 = i_fu_61_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_i_i_reg_33 = ap_const_lv3_0;
    }
}

void main::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void main::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void main::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void main::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void main::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(grp_next_set_fu_44_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(grp_next_set_fu_44_ap_return.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void main::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void main::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(grp_next_set_fu_44_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(grp_next_set_fu_44_ap_return.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void main::thread_grp_next_set_fu_44_ap_start() {
    grp_next_set_fu_44_ap_start = grp_next_set_fu_44_ap_start_reg.read();
}

void main::thread_i_fu_61_p2() {
    i_fu_61_p2 = (!i_0_i_i_reg_33.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_i_i_reg_33.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void main::thread_icmp_ln80_fu_55_p2() {
    icmp_ln80_fu_55_p2 = (!i_0_i_i_reg_33.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_reg_33.read() == ap_const_lv3_7);
}

void main::thread_permutations_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        permutations_address0 =  (sc_lv<3>) (zext_ln81_fu_67_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        permutations_address0 = grp_next_set_fu_44_permutations_address0.read();
    } else {
        permutations_address0 = "XXX";
    }
}

void main::thread_permutations_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        permutations_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        permutations_ce0 = grp_next_set_fu_44_permutations_ce0.read();
    } else {
        permutations_ce0 = ap_const_logic_0;
    }
}

void main::thread_permutations_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        permutations_ce1 = grp_next_set_fu_44_permutations_ce1.read();
    } else {
        permutations_ce1 = ap_const_logic_0;
    }
}

void main::thread_permutations_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        permutations_d0 = zext_ln80_fu_50_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        permutations_d0 = grp_next_set_fu_44_permutations_d0.read();
    } else {
        permutations_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void main::thread_permutations_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln80_fu_55_p2.read(), ap_const_lv1_0))) {
        permutations_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        permutations_we0 = grp_next_set_fu_44_permutations_we0.read();
    } else {
        permutations_we0 = ap_const_logic_0;
    }
}

void main::thread_permutations_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        permutations_we1 = grp_next_set_fu_44_permutations_we1.read();
    } else {
        permutations_we1 = ap_const_logic_0;
    }
}

void main::thread_zext_ln80_fu_50_p1() {
    zext_ln80_fu_50_p1 = esl_zext<32,3>(i_0_i_i_reg_33.read());
}

void main::thread_zext_ln81_fu_67_p1() {
    zext_ln81_fu_67_p1 = esl_zext<64,3>(i_0_i_i_reg_33.read());
}

void main::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln80_fu_55_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_next_set_fu_44_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(grp_next_set_fu_44_ap_return.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_next_set_fu_44_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(grp_next_set_fu_44_ap_return.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void main::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

