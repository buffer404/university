// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "next_set.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic next_set::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic next_set::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> next_set::ap_ST_fsm_state1 = "1";
const sc_lv<10> next_set::ap_ST_fsm_state2 = "10";
const sc_lv<10> next_set::ap_ST_fsm_state3 = "100";
const sc_lv<10> next_set::ap_ST_fsm_state4 = "1000";
const sc_lv<10> next_set::ap_ST_fsm_state5 = "10000";
const sc_lv<10> next_set::ap_ST_fsm_state6 = "100000";
const sc_lv<10> next_set::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> next_set::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> next_set::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> next_set::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> next_set::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> next_set::ap_const_lv32_2 = "10";
const sc_lv<32> next_set::ap_const_lv32_7 = "111";
const sc_lv<32> next_set::ap_const_lv32_1 = "1";
const sc_lv<1> next_set::ap_const_lv1_0 = "0";
const sc_lv<32> next_set::ap_const_lv32_3 = "11";
const sc_lv<32> next_set::ap_const_lv32_6 = "110";
const sc_lv<1> next_set::ap_const_lv1_1 = "1";
const sc_lv<32> next_set::ap_const_lv32_FFFFFFFE = "11111111111111111111111111111110";
const sc_lv<32> next_set::ap_const_lv32_4 = "100";
const sc_lv<32> next_set::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> next_set::ap_const_lv32_5 = "101";
const sc_lv<32> next_set::ap_const_lv32_8 = "1000";
const sc_lv<32> next_set::ap_const_lv32_9 = "1001";
const bool next_set::ap_const_boolean_1 = true;

next_set::next_set(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln53_fu_148_p2);
    sensitive << ( i_assign_reg_74 );

    SC_METHOD(thread_add_ln61_fu_210_p2);
    sensitive << ( r_reg_97 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_0_reg_118 );
    sensitive << ( ap_return_preg );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_icmp_ln53_1_fu_159_p2);
    sensitive << ( permutations_q0 );
    sensitive << ( permutations_q1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln53_fu_137_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_assign_reg_74 );

    SC_METHOD(thread_icmp_ln57_fu_182_p2);
    sensitive << ( permutations_q0 );
    sensitive << ( reg_131 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_icmp_ln60_fu_194_p2);
    sensitive << ( l_fu_188_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( r_reg_97 );

    SC_METHOD(thread_j_fu_165_p2);
    sensitive << ( i_assign_reg_74 );

    SC_METHOD(thread_k_fu_171_p2);
    sensitive << ( k_0_in_reg_86 );

    SC_METHOD(thread_l_fu_188_p2);
    sensitive << ( l_0_in_reg_108 );

    SC_METHOD(thread_permutations_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( permutations_addr_2_reg_243 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( permutations_addr_4_reg_264 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sext_ln53_fu_143_p1 );
    sensitive << ( sext_ln57_fu_177_p1 );
    sensitive << ( sext_ln47_fu_205_p1 );

    SC_METHOD(thread_permutations_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( permutations_addr_reg_219 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( permutations_addr_3_reg_259 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( sext_ln53_1_fu_154_p1 );
    sensitive << ( sext_ln46_fu_200_p1 );

    SC_METHOD(thread_permutations_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_permutations_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_permutations_d0);
    sensitive << ( reg_131 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_permutations_d1);
    sensitive << ( permutations_q0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_permutations_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_permutations_we1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln57_fu_182_p2 );

    SC_METHOD(thread_sext_ln46_fu_200_p1);
    sensitive << ( l_fu_188_p2 );

    SC_METHOD(thread_sext_ln47_fu_205_p1);
    sensitive << ( r_reg_97 );

    SC_METHOD(thread_sext_ln53_1_fu_154_p1);
    sensitive << ( add_ln53_fu_148_p2 );

    SC_METHOD(thread_sext_ln53_fu_143_p1);
    sensitive << ( i_assign_reg_74 );

    SC_METHOD(thread_sext_ln57_fu_177_p1);
    sensitive << ( k_fu_171_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln53_fu_137_p2 );
    sensitive << ( icmp_ln53_1_fu_159_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln60_fu_194_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln57_fu_182_p2 );

    ap_CS_fsm = "0000000001";
    ap_return_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "next_set_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, permutations_address0, "(port)permutations_address0");
    sc_trace(mVcdFile, permutations_ce0, "(port)permutations_ce0");
    sc_trace(mVcdFile, permutations_we0, "(port)permutations_we0");
    sc_trace(mVcdFile, permutations_d0, "(port)permutations_d0");
    sc_trace(mVcdFile, permutations_q0, "(port)permutations_q0");
    sc_trace(mVcdFile, permutations_address1, "(port)permutations_address1");
    sc_trace(mVcdFile, permutations_ce1, "(port)permutations_ce1");
    sc_trace(mVcdFile, permutations_we1, "(port)permutations_we1");
    sc_trace(mVcdFile, permutations_d1, "(port)permutations_d1");
    sc_trace(mVcdFile, permutations_q1, "(port)permutations_q1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_131, "reg_131");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, permutations_addr_reg_219, "permutations_addr_reg_219");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln53_fu_137_p2, "icmp_ln53_fu_137_p2");
    sc_trace(mVcdFile, j_fu_165_p2, "j_fu_165_p2");
    sc_trace(mVcdFile, icmp_ln53_1_fu_159_p2, "icmp_ln53_1_fu_159_p2");
    sc_trace(mVcdFile, k_fu_171_p2, "k_fu_171_p2");
    sc_trace(mVcdFile, k_reg_238, "k_reg_238");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, permutations_addr_2_reg_243, "permutations_addr_2_reg_243");
    sc_trace(mVcdFile, l_fu_188_p2, "l_fu_188_p2");
    sc_trace(mVcdFile, l_reg_251, "l_reg_251");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, permutations_addr_3_reg_259, "permutations_addr_3_reg_259");
    sc_trace(mVcdFile, icmp_ln60_fu_194_p2, "icmp_ln60_fu_194_p2");
    sc_trace(mVcdFile, permutations_addr_4_reg_264, "permutations_addr_4_reg_264");
    sc_trace(mVcdFile, add_ln61_fu_210_p2, "add_ln61_fu_210_p2");
    sc_trace(mVcdFile, add_ln61_reg_269, "add_ln61_reg_269");
    sc_trace(mVcdFile, i_assign_reg_74, "i_assign_reg_74");
    sc_trace(mVcdFile, k_0_in_reg_86, "k_0_in_reg_86");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln57_fu_182_p2, "icmp_ln57_fu_182_p2");
    sc_trace(mVcdFile, r_reg_97, "r_reg_97");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, l_0_in_reg_108, "l_0_in_reg_108");
    sc_trace(mVcdFile, p_0_reg_118, "p_0_reg_118");
    sc_trace(mVcdFile, sext_ln53_fu_143_p1, "sext_ln53_fu_143_p1");
    sc_trace(mVcdFile, sext_ln53_1_fu_154_p1, "sext_ln53_1_fu_154_p1");
    sc_trace(mVcdFile, sext_ln57_fu_177_p1, "sext_ln57_fu_177_p1");
    sc_trace(mVcdFile, sext_ln46_fu_200_p1, "sext_ln46_fu_200_p1");
    sc_trace(mVcdFile, sext_ln47_fu_205_p1, "sext_ln47_fu_205_p1");
    sc_trace(mVcdFile, add_ln53_fu_148_p2, "add_ln53_fu_148_p2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

next_set::~next_set() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void next_set::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            ap_return_preg = p_0_reg_118.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln53_1_fu_159_p2.read()))) {
        i_assign_reg_74 = j_fu_165_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_assign_reg_74 = ap_const_lv32_FFFFFFFE;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln53_1_fu_159_p2.read(), ap_const_lv1_1))) {
        k_0_in_reg_86 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln57_fu_182_p2.read()))) {
        k_0_in_reg_86 = k_reg_238.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        l_0_in_reg_108 = l_reg_251.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        l_0_in_reg_108 = i_assign_reg_74.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln53_fu_137_p2.read(), ap_const_lv1_1))) {
        p_0_reg_118 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln60_fu_194_p2.read()))) {
        p_0_reg_118 = ap_const_lv1_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        r_reg_97 = add_ln61_reg_269.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        r_reg_97 = ap_const_lv32_FFFFFFFF;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        reg_131 = permutations_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        reg_131 = permutations_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln60_fu_194_p2.read(), ap_const_lv1_1))) {
        add_ln61_reg_269 = add_ln61_fu_210_p2.read();
        permutations_addr_3_reg_259 =  (sc_lv<3>) (sext_ln46_fu_200_p1.read());
        permutations_addr_4_reg_264 =  (sc_lv<3>) (sext_ln47_fu_205_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_reg_238 = k_fu_171_p2.read();
        permutations_addr_2_reg_243 =  (sc_lv<3>) (sext_ln57_fu_177_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        l_reg_251 = l_fu_188_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln53_fu_137_p2.read(), ap_const_lv1_0))) {
        permutations_addr_reg_219 =  (sc_lv<3>) (sext_ln53_fu_143_p1.read());
    }
}

void next_set::thread_add_ln53_fu_148_p2() {
    add_ln53_fu_148_p2 = (!i_assign_reg_74.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(i_assign_reg_74.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void next_set::thread_add_ln61_fu_210_p2() {
    add_ln61_fu_210_p2 = (!r_reg_97.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_bigint<32>(r_reg_97.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void next_set::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void next_set::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void next_set::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void next_set::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void next_set::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void next_set::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void next_set::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void next_set::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void next_set::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void next_set::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void next_set::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void next_set::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void next_set::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void next_set::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_return = p_0_reg_118.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void next_set::thread_icmp_ln53_1_fu_159_p2() {
    icmp_ln53_1_fu_159_p2 = (!permutations_q0.read().is_01() || !permutations_q1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(permutations_q0.read()) < sc_bigint<32>(permutations_q1.read()));
}

void next_set::thread_icmp_ln53_fu_137_p2() {
    icmp_ln53_fu_137_p2 = (!i_assign_reg_74.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<1>(): sc_lv<1>(i_assign_reg_74.read() == ap_const_lv32_FFFFFFFF);
}

void next_set::thread_icmp_ln57_fu_182_p2() {
    icmp_ln57_fu_182_p2 = (!reg_131.read().is_01() || !permutations_q0.read().is_01())? sc_lv<1>(): (sc_bigint<32>(reg_131.read()) < sc_bigint<32>(permutations_q0.read()));
}

void next_set::thread_icmp_ln60_fu_194_p2() {
    icmp_ln60_fu_194_p2 = (!l_fu_188_p2.read().is_01() || !r_reg_97.read().is_01())? sc_lv<1>(): (sc_bigint<32>(l_fu_188_p2.read()) < sc_bigint<32>(r_reg_97.read()));
}

void next_set::thread_j_fu_165_p2() {
    j_fu_165_p2 = (!i_assign_reg_74.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_bigint<32>(i_assign_reg_74.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void next_set::thread_k_fu_171_p2() {
    k_fu_171_p2 = (!k_0_in_reg_86.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(k_0_in_reg_86.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void next_set::thread_l_fu_188_p2() {
    l_fu_188_p2 = (!l_0_in_reg_108.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(l_0_in_reg_108.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void next_set::thread_permutations_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        permutations_address0 = permutations_addr_4_reg_264.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        permutations_address0 =  (sc_lv<3>) (sext_ln47_fu_205_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        permutations_address0 = permutations_addr_2_reg_243.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        permutations_address0 =  (sc_lv<3>) (sext_ln57_fu_177_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        permutations_address0 =  (sc_lv<3>) (sext_ln53_fu_143_p1.read());
    } else {
        permutations_address0 = "XXX";
    }
}

void next_set::thread_permutations_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        permutations_address1 = permutations_addr_3_reg_259.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        permutations_address1 =  (sc_lv<3>) (sext_ln46_fu_200_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        permutations_address1 = permutations_addr_reg_219.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        permutations_address1 =  (sc_lv<3>) (sext_ln53_1_fu_154_p1.read());
    } else {
        permutations_address1 = "XXX";
    }
}

void next_set::thread_permutations_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        permutations_ce0 = ap_const_logic_1;
    } else {
        permutations_ce0 = ap_const_logic_0;
    }
}

void next_set::thread_permutations_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        permutations_ce1 = ap_const_logic_1;
    } else {
        permutations_ce1 = ap_const_logic_0;
    }
}

void next_set::thread_permutations_d0() {
    permutations_d0 = reg_131.read();
}

void next_set::thread_permutations_d1() {
    permutations_d1 = permutations_q0.read();
}

void next_set::thread_permutations_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        permutations_we0 = ap_const_logic_1;
    } else {
        permutations_we0 = ap_const_logic_0;
    }
}

void next_set::thread_permutations_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln57_fu_182_p2.read())))) {
        permutations_we1 = ap_const_logic_1;
    } else {
        permutations_we1 = ap_const_logic_0;
    }
}

void next_set::thread_sext_ln46_fu_200_p1() {
    sext_ln46_fu_200_p1 = esl_sext<64,32>(l_fu_188_p2.read());
}

void next_set::thread_sext_ln47_fu_205_p1() {
    sext_ln47_fu_205_p1 = esl_sext<64,32>(r_reg_97.read());
}

void next_set::thread_sext_ln53_1_fu_154_p1() {
    sext_ln53_1_fu_154_p1 = esl_sext<64,32>(add_ln53_fu_148_p2.read());
}

void next_set::thread_sext_ln53_fu_143_p1() {
    sext_ln53_fu_143_p1 = esl_sext<64,32>(i_assign_reg_74.read());
}

void next_set::thread_sext_ln57_fu_177_p1() {
    sext_ln57_fu_177_p1 = esl_sext<64,32>(k_fu_171_p2.read());
}

void next_set::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln53_fu_137_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln53_1_fu_159_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln57_fu_182_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln60_fu_194_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}

