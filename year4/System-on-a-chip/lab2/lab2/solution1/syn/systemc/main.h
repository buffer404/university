// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _main_HH_
#define _main_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "next_set.h"
#include "main_permutations.h"

namespace ap_rtl {

struct main : public sc_module {
    // Port declarations 6
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;


    // Module declarations
    main(sc_module_name name);
    SC_HAS_PROCESS(main);

    ~main();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    main_permutations* permutations_U;
    next_set* grp_next_set_fu_44;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > permutations_address0;
    sc_signal< sc_logic > permutations_ce0;
    sc_signal< sc_logic > permutations_we0;
    sc_signal< sc_lv<32> > permutations_d0;
    sc_signal< sc_lv<32> > permutations_q0;
    sc_signal< sc_logic > permutations_ce1;
    sc_signal< sc_logic > permutations_we1;
    sc_signal< sc_lv<32> > permutations_q1;
    sc_signal< sc_lv<3> > i_fu_61_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_next_set_fu_44_ap_start;
    sc_signal< sc_logic > grp_next_set_fu_44_ap_done;
    sc_signal< sc_logic > grp_next_set_fu_44_ap_idle;
    sc_signal< sc_logic > grp_next_set_fu_44_ap_ready;
    sc_signal< sc_lv<3> > grp_next_set_fu_44_permutations_address0;
    sc_signal< sc_logic > grp_next_set_fu_44_permutations_ce0;
    sc_signal< sc_logic > grp_next_set_fu_44_permutations_we0;
    sc_signal< sc_lv<32> > grp_next_set_fu_44_permutations_d0;
    sc_signal< sc_lv<3> > grp_next_set_fu_44_permutations_address1;
    sc_signal< sc_logic > grp_next_set_fu_44_permutations_ce1;
    sc_signal< sc_logic > grp_next_set_fu_44_permutations_we1;
    sc_signal< sc_lv<32> > grp_next_set_fu_44_permutations_d1;
    sc_signal< sc_lv<1> > grp_next_set_fu_44_ap_return;
    sc_signal< sc_lv<3> > i_0_i_i_reg_33;
    sc_signal< sc_lv<1> > icmp_ln80_fu_55_p2;
    sc_signal< sc_logic > grp_next_set_fu_44_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln81_fu_67_p1;
    sc_signal< sc_lv<32> > zext_ln80_fu_50_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_next_set_fu_44_ap_start();
    void thread_i_fu_61_p2();
    void thread_icmp_ln80_fu_55_p2();
    void thread_permutations_address0();
    void thread_permutations_ce0();
    void thread_permutations_ce1();
    void thread_permutations_d0();
    void thread_permutations_we0();
    void thread_permutations_we1();
    void thread_zext_ln80_fu_50_p1();
    void thread_zext_ln81_fu_67_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
