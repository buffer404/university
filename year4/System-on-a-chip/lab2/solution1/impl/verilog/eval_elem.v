// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module eval_elem (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        param,
        n,
        matrix_address0,
        matrix_ce0,
        matrix_q0,
        y_address0,
        y_ce0,
        y_q0,
        permutations_address0,
        permutations_ce0,
        permutations_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] param;
input  [31:0] n;
output  [5:0] matrix_address0;
output   matrix_ce0;
input  [31:0] matrix_q0;
output  [2:0] y_address0;
output   y_ce0;
input  [31:0] y_q0;
output  [2:0] permutations_address0;
output   permutations_ce0;
input  [31:0] permutations_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg matrix_ce0;
reg y_ce0;
reg[2:0] permutations_address0;
reg permutations_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] add_ln41_fu_143_p2;
reg   [31:0] add_ln41_reg_315;
wire   [31:0] zext_ln41_fu_154_p1;
reg   [31:0] zext_ln41_reg_320;
wire    ap_CS_fsm_state2;
wire   [30:0] i_1_fu_163_p2;
reg   [30:0] i_1_reg_328;
wire   [0:0] icmp_ln41_fu_158_p2;
wire   [31:0] select_ln55_fu_178_p3;
reg   [31:0] permutations_load_3_reg_343;
wire    ap_CS_fsm_state3;
wire  signed [31:0] j_fu_186_p2;
reg  signed [31:0] j_reg_348;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln42_fu_192_p2;
wire   [30:0] i_fu_235_p2;
reg   [30:0] i_reg_364;
wire    ap_CS_fsm_state6;
wire   [6:0] trunc_ln36_fu_247_p1;
reg   [6:0] trunc_ln36_reg_369;
wire   [0:0] icmp_ln56_fu_230_p2;
wire   [3:0] trunc_ln36_1_fu_251_p1;
reg   [3:0] trunc_ln36_1_reg_374;
wire   [0:0] icmp_ln36_fu_267_p2;
reg   [0:0] icmp_ln36_reg_389;
wire    ap_CS_fsm_state7;
reg   [31:0] y_load_reg_394;
wire   [6:0] add_ln36_fu_276_p2;
reg   [6:0] add_ln36_reg_399;
wire    ap_CS_fsm_state8;
wire  signed [31:0] select_ln36_fu_286_p3;
reg  signed [31:0] select_ln36_reg_409;
wire    ap_CS_fsm_state9;
wire   [31:0] res_fu_292_p2;
wire    ap_CS_fsm_state10;
reg   [30:0] i_0_i_reg_99;
reg   [31:0] j_0_in_i_reg_110;
wire    ap_CS_fsm_state5;
reg  signed [31:0] res_0_reg_119;
reg   [30:0] i_assign_reg_129;
wire   [63:0] zext_ln43_fu_169_p1;
wire  signed [63:0] sext_ln43_fu_197_p1;
wire   [63:0] zext_ln57_fu_241_p1;
wire  signed [63:0] sext_ln36_fu_282_p1;
reg   [31:0] sum_0_i_fu_28;
wire   [31:0] select_ln43_fu_213_p3;
wire   [0:0] trunc_ln41_fu_174_p1;
wire   [0:0] icmp_ln43_fu_202_p2;
wire   [31:0] sum_fu_207_p2;
wire   [31:0] zext_ln56_fu_226_p1;
wire   [6:0] zext_ln36_cast_fu_255_p3;
wire   [6:0] trunc_ln36_2_fu_272_p1;
wire   [6:0] sub_ln36_fu_262_p2;
reg   [31:0] ap_return_preg;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((icmp_ln56_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_return_preg <= res_0_reg_119;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_i_reg_99 <= i_1_reg_328;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_99 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_assign_reg_129 <= i_reg_364;
    end else if (((icmp_ln41_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_assign_reg_129 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_in_i_reg_110 <= zext_ln41_reg_320;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_in_i_reg_110 <= j_reg_348;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        res_0_reg_119 <= res_fu_292_p2;
    end else if (((icmp_ln41_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        res_0_reg_119 <= select_ln55_fu_178_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sum_0_i_fu_28 <= select_ln43_fu_213_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_0_i_fu_28 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln36_reg_399 <= add_ln36_fu_276_p2;
        icmp_ln36_reg_389 <= icmp_ln36_fu_267_p2;
        y_load_reg_394 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln41_reg_315 <= add_ln41_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_328 <= i_1_fu_163_p2;
        zext_ln41_reg_320[30 : 0] <= zext_ln41_fu_154_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_364 <= i_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_348 <= j_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        permutations_load_3_reg_343 <= permutations_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        select_ln36_reg_409 <= select_ln36_fu_286_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        trunc_ln36_1_reg_374 <= trunc_ln36_1_fu_251_p1;
        trunc_ln36_reg_369 <= trunc_ln36_fu_247_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln56_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_return = res_0_reg_119;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        matrix_ce0 = 1'b1;
    end else begin
        matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        permutations_address0 = zext_ln57_fu_241_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        permutations_address0 = sext_ln43_fu_197_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        permutations_address0 = zext_ln43_fu_169_p1;
    end else begin
        permutations_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        permutations_ce0 = 1'b1;
    end else begin
        permutations_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln41_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln42_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln56_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_fu_276_p2 = (trunc_ln36_2_fu_272_p1 + sub_ln36_fu_262_p2);

assign add_ln41_fu_143_p2 = ($signed(n) + $signed(32'd4294967295));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_1_fu_163_p2 = (i_0_i_reg_99 + 31'd1);

assign i_fu_235_p2 = (i_assign_reg_129 + 31'd1);

assign icmp_ln36_fu_267_p2 = ((permutations_q0 == param) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_158_p2 = (($signed(zext_ln41_fu_154_p1) < $signed(n)) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_192_p2 = ((j_0_in_i_reg_110 == add_ln41_reg_315) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_202_p2 = (($signed(permutations_load_3_reg_343) > $signed(permutations_q0)) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_230_p2 = (($signed(zext_ln56_fu_226_p1) < $signed(n)) ? 1'b1 : 1'b0);

assign j_fu_186_p2 = (j_0_in_i_reg_110 + 32'd1);

assign matrix_address0 = sext_ln36_fu_282_p1;

assign res_fu_292_p2 = ($signed(select_ln36_reg_409) * $signed(res_0_reg_119));

assign select_ln36_fu_286_p3 = ((icmp_ln36_reg_389[0:0] === 1'b1) ? y_load_reg_394 : matrix_q0);

assign select_ln43_fu_213_p3 = ((icmp_ln43_fu_202_p2[0:0] === 1'b1) ? sum_fu_207_p2 : sum_0_i_fu_28);

assign select_ln55_fu_178_p3 = ((trunc_ln41_fu_174_p1[0:0] === 1'b1) ? 32'd4294967295 : 32'd1);

assign sext_ln36_fu_282_p1 = $signed(add_ln36_reg_399);

assign sext_ln43_fu_197_p1 = j_fu_186_p2;

assign sub_ln36_fu_262_p2 = (zext_ln36_cast_fu_255_p3 - trunc_ln36_reg_369);

assign sum_fu_207_p2 = (sum_0_i_fu_28 + 32'd1);

assign trunc_ln36_1_fu_251_p1 = i_assign_reg_129[3:0];

assign trunc_ln36_2_fu_272_p1 = permutations_q0[6:0];

assign trunc_ln36_fu_247_p1 = i_assign_reg_129[6:0];

assign trunc_ln41_fu_174_p1 = sum_0_i_fu_28[0:0];

assign y_address0 = zext_ln57_fu_241_p1;

assign zext_ln36_cast_fu_255_p3 = {{trunc_ln36_1_reg_374}, {3'd0}};

assign zext_ln41_fu_154_p1 = i_0_i_reg_99;

assign zext_ln43_fu_169_p1 = i_0_i_reg_99;

assign zext_ln56_fu_226_p1 = i_assign_reg_129;

assign zext_ln57_fu_241_p1 = i_assign_reg_129;

always @ (posedge ap_clk) begin
    zext_ln41_reg_320[31] <= 1'b0;
end

endmodule //eval_elem
