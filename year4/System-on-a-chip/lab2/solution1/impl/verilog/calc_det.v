// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module calc_det (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        param,
        n,
        matrix_address0,
        matrix_ce0,
        matrix_q0,
        y_address0,
        y_ce0,
        y_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] param;
input  [31:0] n;
output  [5:0] matrix_address0;
output   matrix_ce0;
input  [31:0] matrix_q0;
output  [2:0] y_address0;
output   y_ce0;
input  [31:0] y_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg matrix_ce0;
reg y_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] permutations_address0;
reg    permutations_ce0;
reg    permutations_we0;
reg   [31:0] permutations_d0;
wire   [31:0] permutations_q0;
reg    permutations_ce1;
reg    permutations_we1;
wire   [31:0] permutations_q1;
wire   [2:0] i_fu_104_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_eval_elem_fu_74_ap_return;
wire    ap_CS_fsm_state3;
wire    grp_eval_elem_fu_74_ap_ready;
wire    grp_eval_elem_fu_74_ap_done;
wire   [31:0] res_1_fu_115_p2;
wire    ap_CS_fsm_state7;
wire    grp_eval_elem_fu_74_ap_start;
wire    grp_eval_elem_fu_74_ap_idle;
wire   [5:0] grp_eval_elem_fu_74_matrix_address0;
wire    grp_eval_elem_fu_74_matrix_ce0;
wire   [2:0] grp_eval_elem_fu_74_y_address0;
wire    grp_eval_elem_fu_74_y_ce0;
wire   [2:0] grp_eval_elem_fu_74_permutations_address0;
wire    grp_eval_elem_fu_74_permutations_ce0;
wire    grp_next_set_fu_86_ap_start;
wire    grp_next_set_fu_86_ap_done;
wire    grp_next_set_fu_86_ap_idle;
wire    grp_next_set_fu_86_ap_ready;
wire   [2:0] grp_next_set_fu_86_permutations_address0;
wire    grp_next_set_fu_86_permutations_ce0;
wire    grp_next_set_fu_86_permutations_we0;
wire   [31:0] grp_next_set_fu_86_permutations_d0;
wire   [2:0] grp_next_set_fu_86_permutations_address1;
wire    grp_next_set_fu_86_permutations_ce1;
wire    grp_next_set_fu_86_permutations_we1;
wire   [31:0] grp_next_set_fu_86_permutations_d1;
wire   [0:0] grp_next_set_fu_86_ap_return;
reg   [2:0] i_0_i_reg_53;
wire   [0:0] icmp_ln50_fu_98_p2;
reg   [31:0] res_0_reg_64;
reg    grp_eval_elem_fu_74_ap_start_reg;
wire    ap_CS_fsm_state6;
reg    grp_next_set_fu_86_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln51_fu_110_p1;
wire   [31:0] zext_ln50_fu_93_p1;
reg   [31:0] ap_return_preg;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_eval_elem_fu_74_ap_start_reg = 1'b0;
#0 grp_next_set_fu_86_ap_start_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

calc_det_permutations #(
    .DataWidth( 32 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
permutations_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(permutations_address0),
    .ce0(permutations_ce0),
    .we0(permutations_we0),
    .d0(permutations_d0),
    .q0(permutations_q0),
    .address1(grp_next_set_fu_86_permutations_address1),
    .ce1(permutations_ce1),
    .we1(permutations_we1),
    .d1(grp_next_set_fu_86_permutations_d1),
    .q1(permutations_q1)
);

eval_elem grp_eval_elem_fu_74(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_eval_elem_fu_74_ap_start),
    .ap_done(grp_eval_elem_fu_74_ap_done),
    .ap_idle(grp_eval_elem_fu_74_ap_idle),
    .ap_ready(grp_eval_elem_fu_74_ap_ready),
    .param(param),
    .n(n),
    .matrix_address0(grp_eval_elem_fu_74_matrix_address0),
    .matrix_ce0(grp_eval_elem_fu_74_matrix_ce0),
    .matrix_q0(matrix_q0),
    .y_address0(grp_eval_elem_fu_74_y_address0),
    .y_ce0(grp_eval_elem_fu_74_y_ce0),
    .y_q0(y_q0),
    .permutations_address0(grp_eval_elem_fu_74_permutations_address0),
    .permutations_ce0(grp_eval_elem_fu_74_permutations_ce0),
    .permutations_q0(permutations_q0),
    .ap_return(grp_eval_elem_fu_74_ap_return)
);

next_set grp_next_set_fu_86(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_next_set_fu_86_ap_start),
    .ap_done(grp_next_set_fu_86_ap_done),
    .ap_idle(grp_next_set_fu_86_ap_idle),
    .ap_ready(grp_next_set_fu_86_ap_ready),
    .n(n),
    .permutations_address0(grp_next_set_fu_86_permutations_address0),
    .permutations_ce0(grp_next_set_fu_86_permutations_ce0),
    .permutations_we0(grp_next_set_fu_86_permutations_we0),
    .permutations_d0(grp_next_set_fu_86_permutations_d0),
    .permutations_q0(permutations_q0),
    .permutations_address1(grp_next_set_fu_86_permutations_address1),
    .permutations_ce1(grp_next_set_fu_86_permutations_ce1),
    .permutations_we1(grp_next_set_fu_86_permutations_we1),
    .permutations_d1(grp_next_set_fu_86_permutations_d1),
    .permutations_q1(permutations_q1),
    .ap_return(grp_next_set_fu_86_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (grp_next_set_fu_86_ap_return == 1'd0) & (grp_next_set_fu_86_ap_done == 1'b1))) begin
            ap_return_preg <= res_0_reg_64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_eval_elem_fu_74_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_98_p2 == 1'd1)))) begin
            grp_eval_elem_fu_74_ap_start_reg <= 1'b1;
        end else if ((grp_eval_elem_fu_74_ap_ready == 1'b1)) begin
            grp_eval_elem_fu_74_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_next_set_fu_86_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_next_set_fu_86_ap_start_reg <= 1'b1;
        end else if ((grp_next_set_fu_86_ap_ready == 1'b1)) begin
            grp_next_set_fu_86_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_98_p2 == 1'd0))) begin
        i_0_i_reg_53 <= i_fu_104_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_53 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_eval_elem_fu_74_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            res_0_reg_64 <= res_1_fu_115_p2;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            res_0_reg_64 <= grp_eval_elem_fu_74_ap_return;
        end
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (grp_next_set_fu_86_ap_return == 1'd0) & (grp_next_set_fu_86_ap_done == 1'b1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_next_set_fu_86_ap_return == 1'd0) & (grp_next_set_fu_86_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_next_set_fu_86_ap_return == 1'd0) & (grp_next_set_fu_86_ap_done == 1'b1))) begin
        ap_return = res_0_reg_64;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        matrix_ce0 = grp_eval_elem_fu_74_matrix_ce0;
    end else begin
        matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_98_p2 == 1'd0))) begin
        permutations_address0 = zext_ln51_fu_110_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        permutations_address0 = grp_next_set_fu_86_permutations_address0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        permutations_address0 = grp_eval_elem_fu_74_permutations_address0;
    end else begin
        permutations_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_98_p2 == 1'd0))) begin
        permutations_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        permutations_ce0 = grp_next_set_fu_86_permutations_ce0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        permutations_ce0 = grp_eval_elem_fu_74_permutations_ce0;
    end else begin
        permutations_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        permutations_ce1 = grp_next_set_fu_86_permutations_ce1;
    end else begin
        permutations_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_98_p2 == 1'd0))) begin
        permutations_d0 = zext_ln50_fu_93_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        permutations_d0 = grp_next_set_fu_86_permutations_d0;
    end else begin
        permutations_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_98_p2 == 1'd0))) begin
        permutations_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        permutations_we0 = grp_next_set_fu_86_permutations_we0;
    end else begin
        permutations_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        permutations_we1 = grp_next_set_fu_86_permutations_we1;
    end else begin
        permutations_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        y_ce0 = grp_eval_elem_fu_74_y_ce0;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_98_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_eval_elem_fu_74_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_next_set_fu_86_ap_return == 1'd0) & (grp_next_set_fu_86_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state5) & (grp_next_set_fu_86_ap_return == 1'd1) & (grp_next_set_fu_86_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_eval_elem_fu_74_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_eval_elem_fu_74_ap_start = grp_eval_elem_fu_74_ap_start_reg;

assign grp_next_set_fu_86_ap_start = grp_next_set_fu_86_ap_start_reg;

assign i_fu_104_p2 = (i_0_i_reg_53 + 3'd1);

assign icmp_ln50_fu_98_p2 = ((i_0_i_reg_53 == 3'd7) ? 1'b1 : 1'b0);

assign matrix_address0 = grp_eval_elem_fu_74_matrix_address0;

assign res_1_fu_115_p2 = (grp_eval_elem_fu_74_ap_return + res_0_reg_64);

assign y_address0 = grp_eval_elem_fu_74_y_address0;

assign zext_ln50_fu_93_p1 = i_0_i_reg_53;

assign zext_ln51_fu_110_p1 = i_0_i_reg_53;

endmodule //calc_det
