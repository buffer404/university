-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calc_det is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    param : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    matrix_ce0 : OUT STD_LOGIC;
    matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of calc_det is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal permutations_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal permutations_ce0 : STD_LOGIC;
    signal permutations_we0 : STD_LOGIC;
    signal permutations_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal permutations_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal permutations_ce1 : STD_LOGIC;
    signal permutations_we1 : STD_LOGIC;
    signal permutations_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_104_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_eval_elem_fu_74_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_eval_elem_fu_74_ap_ready : STD_LOGIC;
    signal grp_eval_elem_fu_74_ap_done : STD_LOGIC;
    signal res_1_fu_115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_eval_elem_fu_74_ap_start : STD_LOGIC;
    signal grp_eval_elem_fu_74_ap_idle : STD_LOGIC;
    signal grp_eval_elem_fu_74_matrix_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_eval_elem_fu_74_matrix_ce0 : STD_LOGIC;
    signal grp_eval_elem_fu_74_y_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_eval_elem_fu_74_y_ce0 : STD_LOGIC;
    signal grp_eval_elem_fu_74_permutations_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_eval_elem_fu_74_permutations_ce0 : STD_LOGIC;
    signal grp_next_set_fu_86_ap_start : STD_LOGIC;
    signal grp_next_set_fu_86_ap_done : STD_LOGIC;
    signal grp_next_set_fu_86_ap_idle : STD_LOGIC;
    signal grp_next_set_fu_86_ap_ready : STD_LOGIC;
    signal grp_next_set_fu_86_permutations_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_next_set_fu_86_permutations_ce0 : STD_LOGIC;
    signal grp_next_set_fu_86_permutations_we0 : STD_LOGIC;
    signal grp_next_set_fu_86_permutations_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_next_set_fu_86_permutations_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_next_set_fu_86_permutations_ce1 : STD_LOGIC;
    signal grp_next_set_fu_86_permutations_we1 : STD_LOGIC;
    signal grp_next_set_fu_86_permutations_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_next_set_fu_86_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_reg_53 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln50_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_0_reg_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_eval_elem_fu_74_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_next_set_fu_86_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln51_fu_110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_93_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component eval_elem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        param : IN STD_LOGIC_VECTOR (31 downto 0);
        n : IN STD_LOGIC_VECTOR (31 downto 0);
        matrix_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        matrix_ce0 : OUT STD_LOGIC;
        matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        permutations_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        permutations_ce0 : OUT STD_LOGIC;
        permutations_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component next_set IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (31 downto 0);
        permutations_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        permutations_ce0 : OUT STD_LOGIC;
        permutations_we0 : OUT STD_LOGIC;
        permutations_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        permutations_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        permutations_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        permutations_ce1 : OUT STD_LOGIC;
        permutations_we1 : OUT STD_LOGIC;
        permutations_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        permutations_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component calc_det_permutations IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    permutations_U : component calc_det_permutations
    generic map (
        DataWidth => 32,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => permutations_address0,
        ce0 => permutations_ce0,
        we0 => permutations_we0,
        d0 => permutations_d0,
        q0 => permutations_q0,
        address1 => grp_next_set_fu_86_permutations_address1,
        ce1 => permutations_ce1,
        we1 => permutations_we1,
        d1 => grp_next_set_fu_86_permutations_d1,
        q1 => permutations_q1);

    grp_eval_elem_fu_74 : component eval_elem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_eval_elem_fu_74_ap_start,
        ap_done => grp_eval_elem_fu_74_ap_done,
        ap_idle => grp_eval_elem_fu_74_ap_idle,
        ap_ready => grp_eval_elem_fu_74_ap_ready,
        param => param,
        n => n,
        matrix_address0 => grp_eval_elem_fu_74_matrix_address0,
        matrix_ce0 => grp_eval_elem_fu_74_matrix_ce0,
        matrix_q0 => matrix_q0,
        y_address0 => grp_eval_elem_fu_74_y_address0,
        y_ce0 => grp_eval_elem_fu_74_y_ce0,
        y_q0 => y_q0,
        permutations_address0 => grp_eval_elem_fu_74_permutations_address0,
        permutations_ce0 => grp_eval_elem_fu_74_permutations_ce0,
        permutations_q0 => permutations_q0,
        ap_return => grp_eval_elem_fu_74_ap_return);

    grp_next_set_fu_86 : component next_set
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_next_set_fu_86_ap_start,
        ap_done => grp_next_set_fu_86_ap_done,
        ap_idle => grp_next_set_fu_86_ap_idle,
        ap_ready => grp_next_set_fu_86_ap_ready,
        n => n,
        permutations_address0 => grp_next_set_fu_86_permutations_address0,
        permutations_ce0 => grp_next_set_fu_86_permutations_ce0,
        permutations_we0 => grp_next_set_fu_86_permutations_we0,
        permutations_d0 => grp_next_set_fu_86_permutations_d0,
        permutations_q0 => permutations_q0,
        permutations_address1 => grp_next_set_fu_86_permutations_address1,
        permutations_ce1 => grp_next_set_fu_86_permutations_ce1,
        permutations_we1 => grp_next_set_fu_86_permutations_we1,
        permutations_d1 => grp_next_set_fu_86_permutations_d1,
        permutations_q1 => permutations_q1,
        ap_return => grp_next_set_fu_86_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_next_set_fu_86_ap_return = ap_const_lv1_0) and (grp_next_set_fu_86_ap_done = ap_const_logic_1))) then 
                    ap_return_preg <= res_0_reg_64;
                end if; 
            end if;
        end if;
    end process;


    grp_eval_elem_fu_74_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_eval_elem_fu_74_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln50_fu_98_p2 = ap_const_lv1_1)))) then 
                    grp_eval_elem_fu_74_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_eval_elem_fu_74_ap_ready = ap_const_logic_1)) then 
                    grp_eval_elem_fu_74_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_next_set_fu_86_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_next_set_fu_86_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_next_set_fu_86_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_next_set_fu_86_ap_ready = ap_const_logic_1)) then 
                    grp_next_set_fu_86_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_53_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln50_fu_98_p2 = ap_const_lv1_0))) then 
                i_0_i_reg_53 <= i_fu_104_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_53 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    res_0_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_eval_elem_fu_74_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    res_0_reg_64 <= res_1_fu_115_p2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    res_0_reg_64 <= grp_eval_elem_fu_74_ap_return;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_eval_elem_fu_74_ap_done, ap_CS_fsm_state7, grp_next_set_fu_86_ap_done, grp_next_set_fu_86_ap_return, icmp_ln50_fu_98_p2, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln50_fu_98_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_eval_elem_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_next_set_fu_86_ap_return = ap_const_lv1_0) and (grp_next_set_fu_86_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_next_set_fu_86_ap_return = ap_const_lv1_1) and (grp_next_set_fu_86_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_eval_elem_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_next_set_fu_86_ap_done, grp_next_set_fu_86_ap_return, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_next_set_fu_86_ap_return = ap_const_lv1_0) and (grp_next_set_fu_86_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_next_set_fu_86_ap_done, grp_next_set_fu_86_ap_return, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_next_set_fu_86_ap_return = ap_const_lv1_0) and (grp_next_set_fu_86_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_next_set_fu_86_ap_done, grp_next_set_fu_86_ap_return, res_0_reg_64, ap_CS_fsm_state5, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_next_set_fu_86_ap_return = ap_const_lv1_0) and (grp_next_set_fu_86_ap_done = ap_const_logic_1))) then 
            ap_return <= res_0_reg_64;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_eval_elem_fu_74_ap_start <= grp_eval_elem_fu_74_ap_start_reg;
    grp_next_set_fu_86_ap_start <= grp_next_set_fu_86_ap_start_reg;
    i_fu_104_p2 <= std_logic_vector(unsigned(i_0_i_reg_53) + unsigned(ap_const_lv3_1));
    icmp_ln50_fu_98_p2 <= "1" when (i_0_i_reg_53 = ap_const_lv3_7) else "0";
    matrix_address0 <= grp_eval_elem_fu_74_matrix_address0;

    matrix_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, grp_eval_elem_fu_74_matrix_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix_ce0 <= grp_eval_elem_fu_74_matrix_ce0;
        else 
            matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    permutations_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, grp_eval_elem_fu_74_permutations_address0, grp_next_set_fu_86_permutations_address0, icmp_ln50_fu_98_p2, ap_CS_fsm_state5, zext_ln51_fu_110_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln50_fu_98_p2 = ap_const_lv1_0))) then 
            permutations_address0 <= zext_ln51_fu_110_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            permutations_address0 <= grp_next_set_fu_86_permutations_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            permutations_address0 <= grp_eval_elem_fu_74_permutations_address0;
        else 
            permutations_address0 <= "XXX";
        end if; 
    end process;


    permutations_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, grp_eval_elem_fu_74_permutations_ce0, grp_next_set_fu_86_permutations_ce0, icmp_ln50_fu_98_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln50_fu_98_p2 = ap_const_lv1_0))) then 
            permutations_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            permutations_ce0 <= grp_next_set_fu_86_permutations_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            permutations_ce0 <= grp_eval_elem_fu_74_permutations_ce0;
        else 
            permutations_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    permutations_ce1_assign_proc : process(grp_next_set_fu_86_permutations_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            permutations_ce1 <= grp_next_set_fu_86_permutations_ce1;
        else 
            permutations_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    permutations_d0_assign_proc : process(ap_CS_fsm_state2, grp_next_set_fu_86_permutations_d0, icmp_ln50_fu_98_p2, ap_CS_fsm_state5, zext_ln50_fu_93_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln50_fu_98_p2 = ap_const_lv1_0))) then 
            permutations_d0 <= zext_ln50_fu_93_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            permutations_d0 <= grp_next_set_fu_86_permutations_d0;
        else 
            permutations_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    permutations_we0_assign_proc : process(ap_CS_fsm_state2, grp_next_set_fu_86_permutations_we0, icmp_ln50_fu_98_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln50_fu_98_p2 = ap_const_lv1_0))) then 
            permutations_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            permutations_we0 <= grp_next_set_fu_86_permutations_we0;
        else 
            permutations_we0 <= ap_const_logic_0;
        end if; 
    end process;


    permutations_we1_assign_proc : process(grp_next_set_fu_86_permutations_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            permutations_we1 <= grp_next_set_fu_86_permutations_we1;
        else 
            permutations_we1 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_fu_115_p2 <= std_logic_vector(unsigned(grp_eval_elem_fu_74_ap_return) + unsigned(res_0_reg_64));
    y_address0 <= grp_eval_elem_fu_74_y_address0;

    y_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, grp_eval_elem_fu_74_y_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            y_ce0 <= grp_eval_elem_fu_74_y_ce0;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln50_fu_93_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_53),32));
    zext_ln51_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_53),64));
end behav;
