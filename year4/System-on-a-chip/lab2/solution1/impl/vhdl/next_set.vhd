-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity next_set is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    permutations_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    permutations_ce0 : OUT STD_LOGIC;
    permutations_we0 : OUT STD_LOGIC;
    permutations_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    permutations_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    permutations_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    permutations_ce1 : OUT STD_LOGIC;
    permutations_we1 : OUT STD_LOGIC;
    permutations_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    permutations_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of next_set is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal permutations_addr_reg_219 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln55_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln55_1_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal permutations_addr_2_reg_243 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal permutations_addr_3_reg_259 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln62_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal permutations_addr_4_reg_264 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln63_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln63_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_assign_reg_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_in_reg_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln59_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_97 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal l_0_in_reg_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_reg_118 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln55_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln55_1_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln59_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln48_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln49_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln55_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_return_preg <= p_0_reg_118;
                end if; 
            end if;
        end if;
    end process;


    i_assign_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_1_fu_159_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_assign_reg_74 <= j_fu_165_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_assign_reg_74 <= ap_const_lv32_FFFFFFFE;
            end if; 
        end if;
    end process;

    k_0_in_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_1_fu_159_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_in_reg_86 <= ap_const_lv32_0;
            elsif (((icmp_ln59_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_0_in_reg_86 <= k_reg_238;
            end if; 
        end if;
    end process;

    l_0_in_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                l_0_in_reg_108 <= l_reg_251;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                l_0_in_reg_108 <= i_assign_reg_74;
            end if; 
        end if;
    end process;

    p_0_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_137_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_reg_118 <= ap_const_lv1_0;
            elsif (((icmp_ln62_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_0_reg_118 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    r_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_reg_97 <= add_ln63_reg_269;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_reg_97 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_131 <= permutations_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_131 <= permutations_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln63_reg_269 <= add_ln63_fu_210_p2;
                permutations_addr_3_reg_259 <= sext_ln48_fu_200_p1(3 - 1 downto 0);
                permutations_addr_4_reg_264 <= sext_ln49_fu_205_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_238 <= k_fu_171_p2;
                permutations_addr_2_reg_243 <= sext_ln59_fu_177_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                l_reg_251 <= l_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                permutations_addr_reg_219 <= sext_ln55_fu_143_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2, icmp_ln55_fu_137_p2, icmp_ln55_1_fu_159_p2, ap_CS_fsm_state7, icmp_ln62_fu_194_p2, ap_CS_fsm_state5, icmp_ln59_fu_182_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln55_fu_137_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln55_1_fu_159_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln59_fu_182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln62_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln55_fu_148_p2 <= std_logic_vector(signed(i_assign_reg_74) + signed(ap_const_lv32_1));
    add_ln63_fu_210_p2 <= std_logic_vector(signed(r_reg_97) + signed(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(p_0_reg_118, ap_return_preg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_return <= p_0_reg_118;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    icmp_ln55_1_fu_159_p2 <= "1" when (signed(permutations_q0) < signed(permutations_q1)) else "0";
    icmp_ln55_fu_137_p2 <= "1" when (i_assign_reg_74 = ap_const_lv32_FFFFFFFF) else "0";
    icmp_ln59_fu_182_p2 <= "1" when (signed(reg_131) < signed(permutations_q0)) else "0";
    icmp_ln62_fu_194_p2 <= "1" when (signed(l_fu_188_p2) < signed(r_reg_97)) else "0";
    j_fu_165_p2 <= std_logic_vector(signed(i_assign_reg_74) + signed(ap_const_lv32_FFFFFFFF));
    k_fu_171_p2 <= std_logic_vector(unsigned(k_0_in_reg_86) + unsigned(ap_const_lv32_FFFFFFFF));
    l_fu_188_p2 <= std_logic_vector(unsigned(l_0_in_reg_108) + unsigned(ap_const_lv32_1));

    permutations_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, permutations_addr_2_reg_243, ap_CS_fsm_state7, permutations_addr_4_reg_264, ap_CS_fsm_state6, ap_CS_fsm_state9, sext_ln55_fu_143_p1, sext_ln59_fu_177_p1, sext_ln49_fu_205_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            permutations_address0 <= permutations_addr_4_reg_264;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            permutations_address0 <= sext_ln49_fu_205_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            permutations_address0 <= permutations_addr_2_reg_243;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            permutations_address0 <= sext_ln59_fu_177_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            permutations_address0 <= sext_ln55_fu_143_p1(3 - 1 downto 0);
        else 
            permutations_address0 <= "XXX";
        end if; 
    end process;


    permutations_address1_assign_proc : process(ap_CS_fsm_state8, permutations_addr_reg_219, ap_CS_fsm_state2, ap_CS_fsm_state7, permutations_addr_3_reg_259, ap_CS_fsm_state5, sext_ln55_1_fu_154_p1, sext_ln48_fu_200_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            permutations_address1 <= permutations_addr_3_reg_259;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            permutations_address1 <= sext_ln48_fu_200_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            permutations_address1 <= permutations_addr_reg_219;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            permutations_address1 <= sext_ln55_1_fu_154_p1(3 - 1 downto 0);
        else 
            permutations_address1 <= "XXX";
        end if; 
    end process;


    permutations_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            permutations_ce0 <= ap_const_logic_1;
        else 
            permutations_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    permutations_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            permutations_ce1 <= ap_const_logic_1;
        else 
            permutations_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    permutations_d0 <= reg_131;
    permutations_d1 <= permutations_q0;

    permutations_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            permutations_we0 <= ap_const_logic_1;
        else 
            permutations_we0 <= ap_const_logic_0;
        end if; 
    end process;


    permutations_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state5, icmp_ln59_fu_182_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln59_fu_182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            permutations_we1 <= ap_const_logic_1;
        else 
            permutations_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln48_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(l_fu_188_p2),64));

        sext_ln49_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_reg_97),64));

        sext_ln55_1_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln55_fu_148_p2),64));

        sext_ln55_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_assign_reg_74),64));

        sext_ln59_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_fu_171_p2),64));

end behav;
