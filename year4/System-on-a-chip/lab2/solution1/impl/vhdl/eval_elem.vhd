-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eval_elem is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    param : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    matrix_ce0 : OUT STD_LOGIC;
    matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    permutations_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    permutations_ce0 : OUT STD_LOGIC;
    permutations_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of eval_elem is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln41_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln41_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln41_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_163_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_328 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln41_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln55_fu_178_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal permutations_load_3_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln42_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_235_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_364 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln36_fu_247_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln36_reg_369 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln56_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln36_1_fu_251_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln36_1_reg_374 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln36_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal y_load_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_276_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_reg_399 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal select_ln36_fu_286_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln36_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal res_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_0_i_reg_99 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_0_in_i_reg_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal res_0_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_assign_reg_129 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln43_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_0_i_fu_28 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_fu_213_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln41_fu_174_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln56_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln36_cast_fu_255_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln36_2_fu_272_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln36_fu_262_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln56_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_return_preg <= res_0_reg_119;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i_reg_99 <= i_1_reg_328;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_99 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_assign_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_assign_reg_129 <= i_reg_364;
            elsif (((icmp_ln41_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_assign_reg_129 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_0_in_i_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_in_i_reg_110 <= zext_ln41_reg_320;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_in_i_reg_110 <= j_reg_348;
            end if; 
        end if;
    end process;

    res_0_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                res_0_reg_119 <= res_fu_292_p2;
            elsif (((icmp_ln41_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                res_0_reg_119 <= select_ln55_fu_178_p3;
            end if; 
        end if;
    end process;

    sum_0_i_fu_28_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sum_0_i_fu_28 <= select_ln43_fu_213_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_0_i_fu_28 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln36_reg_399 <= add_ln36_fu_276_p2;
                icmp_ln36_reg_389 <= icmp_ln36_fu_267_p2;
                y_load_reg_394 <= y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln41_reg_315 <= add_ln41_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_328 <= i_1_fu_163_p2;
                    zext_ln41_reg_320(30 downto 0) <= zext_ln41_fu_154_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_reg_364 <= i_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_348 <= j_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                permutations_load_3_reg_343 <= permutations_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                select_ln36_reg_409 <= select_ln36_fu_286_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                trunc_ln36_1_reg_374 <= trunc_ln36_1_fu_251_p1;
                trunc_ln36_reg_369 <= trunc_ln36_fu_247_p1;
            end if;
        end if;
    end process;
    zext_ln41_reg_320(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln41_fu_158_p2, ap_CS_fsm_state4, icmp_ln42_fu_192_p2, ap_CS_fsm_state6, icmp_ln56_fu_230_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln41_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln42_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln56_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln36_fu_276_p2 <= std_logic_vector(unsigned(trunc_ln36_2_fu_272_p1) + unsigned(sub_ln36_fu_262_p2));
    add_ln41_fu_143_p2 <= std_logic_vector(unsigned(n) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln56_fu_230_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln56_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln56_fu_230_p2)
    begin
        if (((icmp_ln56_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state6, icmp_ln56_fu_230_p2, res_0_reg_119, ap_return_preg)
    begin
        if (((icmp_ln56_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_return <= res_0_reg_119;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    i_1_fu_163_p2 <= std_logic_vector(unsigned(i_0_i_reg_99) + unsigned(ap_const_lv31_1));
    i_fu_235_p2 <= std_logic_vector(unsigned(i_assign_reg_129) + unsigned(ap_const_lv31_1));
    icmp_ln36_fu_267_p2 <= "1" when (permutations_q0 = param) else "0";
    icmp_ln41_fu_158_p2 <= "1" when (signed(zext_ln41_fu_154_p1) < signed(n)) else "0";
    icmp_ln42_fu_192_p2 <= "1" when (j_0_in_i_reg_110 = add_ln41_reg_315) else "0";
    icmp_ln43_fu_202_p2 <= "1" when (signed(permutations_load_3_reg_343) > signed(permutations_q0)) else "0";
    icmp_ln56_fu_230_p2 <= "1" when (signed(zext_ln56_fu_226_p1) < signed(n)) else "0";
    j_fu_186_p2 <= std_logic_vector(unsigned(j_0_in_i_reg_110) + unsigned(ap_const_lv32_1));
    matrix_address0 <= sext_ln36_fu_282_p1(6 - 1 downto 0);

    matrix_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrix_ce0 <= ap_const_logic_1;
        else 
            matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    permutations_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, zext_ln43_fu_169_p1, sext_ln43_fu_197_p1, zext_ln57_fu_241_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            permutations_address0 <= zext_ln57_fu_241_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            permutations_address0 <= sext_ln43_fu_197_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            permutations_address0 <= zext_ln43_fu_169_p1(3 - 1 downto 0);
        else 
            permutations_address0 <= "XXX";
        end if; 
    end process;


    permutations_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            permutations_ce0 <= ap_const_logic_1;
        else 
            permutations_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_fu_292_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(select_ln36_reg_409) * signed(res_0_reg_119))), 32));
    select_ln36_fu_286_p3 <= 
        y_load_reg_394 when (icmp_ln36_reg_389(0) = '1') else 
        matrix_q0;
    select_ln43_fu_213_p3 <= 
        sum_fu_207_p2 when (icmp_ln43_fu_202_p2(0) = '1') else 
        sum_0_i_fu_28;
    select_ln55_fu_178_p3 <= 
        ap_const_lv32_FFFFFFFF when (trunc_ln41_fu_174_p1(0) = '1') else 
        ap_const_lv32_1;
        sext_ln36_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_reg_399),64));

        sext_ln43_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_fu_186_p2),64));

    sub_ln36_fu_262_p2 <= std_logic_vector(unsigned(zext_ln36_cast_fu_255_p3) - unsigned(trunc_ln36_reg_369));
    sum_fu_207_p2 <= std_logic_vector(unsigned(sum_0_i_fu_28) + unsigned(ap_const_lv32_1));
    trunc_ln36_1_fu_251_p1 <= i_assign_reg_129(4 - 1 downto 0);
    trunc_ln36_2_fu_272_p1 <= permutations_q0(7 - 1 downto 0);
    trunc_ln36_fu_247_p1 <= i_assign_reg_129(7 - 1 downto 0);
    trunc_ln41_fu_174_p1 <= sum_0_i_fu_28(1 - 1 downto 0);
    y_address0 <= zext_ln57_fu_241_p1(3 - 1 downto 0);

    y_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln36_cast_fu_255_p3 <= (trunc_ln36_1_reg_374 & ap_const_lv3_0);
    zext_ln41_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_99),32));
    zext_ln43_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_99),64));
    zext_ln56_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_reg_129),32));
    zext_ln57_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_reg_129),64));
end behav;
